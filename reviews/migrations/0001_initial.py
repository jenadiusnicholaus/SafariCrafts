# Generated by Django 5.1.6 on 2025-08-24 22:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalog', '0001_initial'),
        ('orders', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='rating')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='review title')),
                ('comment', models.TextField(blank=True, verbose_name='comment')),
                ('images', models.JSONField(blank=True, default=list, verbose_name='review images')),
                ('is_verified_purchase', models.BooleanField(default=False, verbose_name='is verified purchase')),
                ('is_approved', models.BooleanField(default=True, verbose_name='is approved')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('helpful_count', models.PositiveIntegerField(default=0, verbose_name='helpful count')),
                ('not_helpful_count', models.PositiveIntegerField(default=0, verbose_name='not helpful count')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('artwork', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='catalog.artwork')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='orders.order')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'db_table': 'reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewHelpfulness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.CharField(choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful')], max_length=15, verbose_name='vote')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpfulness_votes', to='reviews.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review Helpfulness',
                'verbose_name_plural': 'Review Helpfulness',
                'db_table': 'review_helpfulness',
            },
        ),
        migrations.CreateModel(
            name='ReviewReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('inappropriate', 'Inappropriate Content'), ('fake', 'Fake Review'), ('other', 'Other')], max_length=15, verbose_name='reason')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewed', 'Under Review'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=15, verbose_name='status')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='resolution notes')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='resolved at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_reports', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_review_reports', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='reviews.review')),
            ],
            options={
                'verbose_name': 'Review Report',
                'verbose_name_plural': 'Review Reports',
                'db_table': 'review_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_text', models.TextField(verbose_name='response text')),
                ('is_artist_response', models.BooleanField(default=False, verbose_name='is artist response')),
                ('is_admin_response', models.BooleanField(default=False, verbose_name='is admin response')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='response', to='reviews.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_responses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review Response',
                'verbose_name_plural': 'Review Responses',
                'db_table': 'review_responses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['artwork', 'is_approved'], name='reviews_artwork_5f401f_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='reviews_rating_17e8a4_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_verified_purchase'], name='reviews_is_veri_a85f3b_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='reviews_created_53b5d6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'artwork')},
        ),
        migrations.AddIndex(
            model_name='reviewhelpfulness',
            index=models.Index(fields=['review', 'vote'], name='review_help_review__91c94b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewhelpfulness',
            unique_together={('review', 'user')},
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['status'], name='review_repo_status_d76781_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['reason'], name='review_repo_reason_0ff2cd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewreport',
            unique_together={('review', 'reported_by')},
        ),
    ]
